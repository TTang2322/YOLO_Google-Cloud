// Generated by CoffeeScript 1.4.0
(function() {
  // Setup the canvas
    var wc_coords;
    var videoCanvas = document.createElement('canvas'); // Temporary offscreen canvas
    var labelCanvas = document.createElement('canvas');
    var ctxVideo;
    var ctxLabels;
    var doneLoading = 0;
    // Face Data
    const faceImages = 'static/images/FaceRecognition/'
    var faceAlex = new Image();
    var faceBrent = new Image();
    var faceCarl = new Image();
    var faceHaris = new Image();
    var faceOmar = new Image();
    var faceMask = new Image();
    
    // ML Result DATA. This needs to be renamed.
    var openCvCoords, tempOpenCvCoords;
    tempOpenCvCoords = [];
    
    // CNN Variables
   var cnn_result_data, cnnImage;
   cnnImage = new Image();

  function init(){
    var canvasHeight = Math.floor(0.92*screen.height);
    document.getElementById('dashboard_header').style.height = Math.floor(0.08*screen.height) + 'px';
    document.getElementById('dashboard_body').style.height = canvasHeight + 'px';
    var canvas = document.querySelector('#canvaswc');
    canvas.width = screen.width;
    canvas.height = canvasHeight;
    
    
    // Define the location of the CNN Object in the canvas
    var cnn_x = 0.07369791666, cnn_x_ = 0.24010416666, cnn_y = 0.3574074074, cnn_y_ = 0.95601851851;
    var wc_x = 0.25703125, wc_y = 0.22407407407407406, wc_x_ = 0.7252604166666666, wc_y_ = 0.6555555555555556;
    var m3d_x = 0.7432291666666667, m3d_y = 0.6773148148148148, m3d_x_ = 0.9346354166666667, m3d_y_ = 0.9560185185185185;
    var frm_x = 0.7421875, frm_y = 0.12731481481481483, frm_x_ = 0.9361979166666666, frm_y_ = 0.3773148148148148;
    var labels_x = 0.74375, labels_y = 0.399537037037037, labels_x_ = 0.9346354166666667, labels_y_ = 0.6509259259259259;
    cnn_x = Math.floor(cnn_x*canvas.width);
    cnn_x_ = Math.floor(cnn_x_*canvas.width) - cnn_x;
    cnn_y = Math.floor(cnn_y*canvas.height);
    cnn_y_ = Math.floor(cnn_y_*canvas.height) - cnn_y;
    // Update the Webcam Values wrt the canvas dimensions
    wc_x = Math.floor(wc_x*canvas.width);
    wc_x_ = Math.floor(wc_x_*canvas.width) - wc_x;
    wc_y = Math.floor(wc_y*canvas.height);
    wc_y_ = Math.floor(wc_y_*canvas.height) - wc_y;
    wc_coords = [wc_x,wc_y,wc_x_,wc_y_];
    // Update the 3D Model Values wrt the canvas dimensions
    m3d_x = Math.floor(m3d_x*canvas.width);
    m3d_x_ = Math.floor(m3d_x_*canvas.width) - m3d_x;
    m3d_y = Math.floor(m3d_y*canvas.height);
    m3d_y_ = Math.floor(m3d_y_*canvas.height) - m3d_y;

    // Update the FRM Model Values wrt the canvas dimensions
    frm_x = Math.floor(frm_x*canvas.width);
    frm_x_ = Math.floor(frm_x_*canvas.width) - frm_x;
    frm_y = Math.floor(frm_y*canvas.height);
    frm_y_ = Math.floor(frm_y_*canvas.height) - frm_y;

    // Update the FRM Model Values wrt the canvas dimensions
    labels_x = Math.floor(labels_x*canvas.width);
    labels_x_ = Math.floor(labels_x_*canvas.width) - labels_x;
    labels_y = Math.floor(labels_y*canvas.height);
    labels_y_ = Math.floor(labels_y_*canvas.height) - labels_y;

    base_image = new Image();
    base_image.src = 'static/images/bg_template.jpg';

    base_image.onload = function(){
        context = canvas.getContext('2d');
        context.drawImage(base_image, 0, 0, canvas.width, canvas.height);
        drawCNN();
        make_webcam();
        make_3dmodel();
        make_frm();
        make_labels();
        console.log('finished');
        doneLoading += 1;
        loadFaceImages();
        loadLidarImages();
    }
    function drawCNN(){
      context.fillStyle = "#FF00FF";
      context.fillRect(cnn_x, cnn_y, cnn_x_, cnn_y_);  
    }
    function make_webcam(){
    // Dummy holder for our CNN
    context.fillStyle = "#FF00FF";
    context.fillRect(wc_x, wc_y, wc_x_, wc_y_); 
    videoCanvas.height = wc_y_;
    videoCanvas.width = wc_x_;
    ctxVideo = videoCanvas.getContext('2d');

    }

    function make_3dmodel(){
    // Dummy holder for our CNN
    context.fillStyle = "#FF0000";
    context.fillRect(m3d_x, m3d_y, m3d_x_, m3d_y_); 
    }

    function make_frm(){
    // Dummy holder for our CNN
    context.fillStyle = "#FF0000";
    context.fillRect(frm_x, frm_y, frm_x_, frm_y_); 
    }
    function make_labels(){
    // Dummy holder for our CNN
    context.fillStyle = "#FF0000";
    context.fillRect(labels_x, labels_y, labels_x_, labels_y_); 
    labelCanvas.height = labels_y_;
    labelCanvas.width = labels_x_;
    ctxLabels = labelCanvas.getContext('2d');
    }
    function loadFaceImages(){
        faceAlex.src = faceImages + 'Alex.jpg'
        faceAlex.onload = function(){
            doneLoading+=1;
        }
        faceBrent.src = faceImages + 'Brent.jpg'
        faceBrent.onload = function(){
            doneLoading+=1;
        }
        faceCarl.src = faceImages + 'Carl.jpg'
        faceCarl.onload = function(){
            doneLoading+=1;
        }
        faceHaris.src = faceImages + 'Haris.jpg'
        faceHaris.onload = function(){
            doneLoading+=1;
        }
        faceOmar.src = faceImages + 'Omar.jpg'
        faceOmar.onload = function(){
            doneLoading+=1;
        }
        faceMask.src = faceImages + 'mask.jpg'
        faceMask.onload = function(){
            doneLoading+=1;
        }
    }
    /* ------------------------------------------------------- */
    /* -------------------- DRAW LIDAR FRAME ----------------- */
    /* ------------------------------------------------------- */
    
    const model3DDirectory = 'static/images/model_3d/';
    var model3DDefaultImages = [];
    var model3DMachineGunImages = []
    var model3DMobileImages = []
    var model3DPistolImages = []
    function loadLidarImages(){
        // Load Default Images
        for (var i = 0; i < 12; i++){
            var image = new Image();
            var imgName;
            if (i < 10){
                imgName = "0" + i + ".png";
            }
            else{
                imgName = i + ".png";
            }
            image.src = model3DDirectory + 'default/' + imgName;
            model3DDefaultImages.push(image);
            image.onload = function(){
                doneLoading+=1;
            }
        }
        // Load Machine Gun Images
        for (var i = 0; i < 23; i++){
            var image = new Image();
            var imgName;
            if (i < 10){
                imgName = "0" + i + ".png";
            }
            else{
                imgName = i + ".png";
            }
            image.src = model3DDirectory + 'machine_gun/' + imgName;
            model3DMachineGunImages.push(image);
            image.onload = function(){
                doneLoading+=1;
            }
        }
        // Load Mobile Images
        for (var i = 0; i < 12; i++){
            var image = new Image();
            var imgName;
            if (i < 10){
                imgName = "0" + i + ".png";
            }
            else{
                imgName = i + ".png";
            }
            image.src = model3DDirectory + 'mobile/' + imgName;
            model3DMobileImages.push(image);
            image.onload = function(){
                doneLoading+=1;
            }
        }
        // Load Pistol Images
        for (var i = 1; i < 23; i++){
            var image = new Image();
            var imgName;
            if (i < 10){
                imgName = "0" + i + ".png";
            }
            else{
                imgName = i + ".png";
            }
            image.src = model3DDirectory + 'pistol/' + imgName;
            model3DPistolImages.push(image);
            image.onload = function(){
                doneLoading+=1;
            }
        }
    }

      
    /* ------------------------------------------------------- */
    /* -------------------- DRAW FACE FRAME ------------------ */
    /* ------------------------------------------------------- */
    function drawFaceFrame(name){
        var image;
        if (name == "mask"){
            image = faceMask;
        }
        else if (name == "alex"){
            image = faceAlex;
        }
        else if (name == "brent"){
            image = faceBrent;
        }
        else if (name == "carl"){
            image = faceCarl;
        }
        else if (name == "haris"){
            image = faceHaris;
        }
        else if (name == "omar"){
            image = faceOmar;
        }      
        context.drawImage(image, frm_x, frm_y,frm_x_,frm_y_); 
    }
    function drawLidarFrame(name, counter){
        var refArray;
        var image;
        if (name == "default"){
            refArray = model3DDefaultImages;
        }
        else if (name == "machine_gun"){
            refArray = model3DMachineGunImages;
        }
        else if (name == "mobile"){
            refArray = model3DMobileImages;
        }
        else if (name == "handgun"){
            refArray = model3DPistolImages;
        }
        if (counter >= refArray.length){
            counter = 0;
        }
        image = refArray[counter];
        context.drawImage(image,m3d_x, m3d_y, m3d_x_, m3d_y_);
        counter+=1;
        return counter
    }
       
      
    /* ------------------------------------------------------- */
    /* -------------------- DRAW CLASS LABELS -------------- */
      function drawClassLabelFrame(){
        var labels_data = tempOpenCvCoords;
        var label_list = [];
        for (var i = 0, len = labels_data.length; i < len; ++i) {
            var data = labels_data[i];
            if (data.type == "thread_data" && data.name != "thread_frm"){
                for (var j = 0, len2 = data.unique_labels.length; j < len2; ++j ){
                    label_list.push(data.unique_labels[j]);
                }
            }
        } 
        /*
        REQUIRE: LabelList has been converted to a SET!
        */
        ctxLabels.fillStyle = "#373540";
        ctxLabels.fillRect(0,0,labelCanvas.width, labelCanvas.height); 

        var WIDTH = Math.floor(labelCanvas.width*0.05); // 
        var HEIGHT = Math.floor(labelCanvas.height*0.15);
        function gen_dynamic_image_label(text){
            fontScale = 10;

            fontColor = (255,255,255);
            fontThicknes = 6;
            padding = 40;
            // Let the text width be a function of the number of characters.
            text_width = Math.floor(WIDTH*text.length) + 1;
            if ((text.indexOf("barrel") > -1)){
                text = text.split('-')[-1]
            }
            text = text.replace('-',' ')

            var dynamiclabelCanvas = document.createElement('canvas');
            dynamiclabelCanvas.height = HEIGHT;
            dynamiclabelCanvas.width = Math.floor(text_width + padding);
            var tmpCtx = dynamiclabelCanvas.getContext('2d');

            tmpCtx.fillStyle = "#0db025"; // Change To: [ 13, 176,  37]
            tmpCtx.fillRect(0, 0, dynamiclabelCanvas.width, dynamiclabelCanvas.height); 

            tmpCtx.font = fontScale + "pt Arial";
            tmpCtx.fillStyle = '#000000'
            tmpCtx.fillText(text,Math.floor(padding/2), 20);

            return dynamiclabelCanvas;
        }


        var x_offset = 10;
        var y_offset = 10;

        var x_coordinate = x_offset;       
        var y_coordinate = y_offset;


        var padding_x = 15;
        var padding_y = 15;

        var FIRST_ELEMENT = true;
        for(var i = 0; i < label_list.length; i++){
            LABEL = label_list[i];
            if (LABEL.indexOf("person_count") > -1) {
                count = LABEL.split(':')[1];
                if (count > 1){
                    dynamiclabelCanvas = gen_dynamic_image_label(count+ " Persons");
                }
                else{
                    dynamiclabelCanvas = gen_dynamic_image_label(count + " Person");
                }
            }
            else{
                dynamiclabelCanvas = gen_dynamic_image_label(LABEL)
            }
            var h = dynamiclabelCanvas.height;
            var w = dynamiclabelCanvas.width;

            if (FIRST_ELEMENT == true){
                FIRST_ELEMENT = false;
                y_coordinate_end = y_coordinate + h;
            }

            x_coordinate_end = x_coordinate + w;
            if (x_coordinate_end > labelCanvas.width){
                x_coordinate = x_offset;
                x_coordinate_end = x_coordinate + w;
                y_coordinate =  y_coordinate_end + padding_y;
                y_coordinate_end = y_coordinate + h;
            }
            ctxLabels.drawImage(dynamiclabelCanvas,x_coordinate,y_coordinate);
            x_coordinate = x_coordinate_end + padding_x;
        }  
        context.drawImage(labelCanvas, labels_x, labels_y);
    }
  /* -------------------- DRAW CLASS LABELS -------------- */
  /* ------------------------------------------------------- */
      
  function drawCNNFrame(cnn_result_data){
      if (cnn_result_data != null){
          cnnImage.src = cnn_result_data;
                  
          cnnImage.onload = function() {
              context.drawImage(cnnImage, cnn_x, cnn_y, cnn_x_, cnn_y_);  
            };
          
      }
  }
  var prev_labels;
  var prev_face;
  var labels;
  var face = "mask";
  var modelName = "default"
  var modelCounter = 0;
  setInterval(function(){
      drawClassLabelFrame();
  },500);
  setInterval(function(){
  if (doneLoading >= 7 && prev_face != face){
      // Draw the bounding boxes
        for (var i = 0, len = openCvCoords.length; i < len; ++i) {
            var data = openCvCoords[i];
            if (data.type == "face_display"){
                face = data.name
            }
      } 
      drawFaceFrame(face);
      prev_face = face;
  }
    },500);
      
  // Draw the Lidar Frame
  setInterval(function(){
  if (doneLoading >= 42){
      openCvCoords = tempOpenCvCoords;
        for (var i = 0, len = openCvCoords.length; i < len; ++i) {
            var data = openCvCoords[i];
            if (data.type == "model_display"){
                modelName = data.name
            }
        } 
      modelCounter = drawLidarFrame(modelName,modelCounter);
  }
    },100);
      
   setInterval(function(){
      drawCNNFrame(cnn_result_data);
    },500);
      
      
      
      
      
      
      
  }
  init();
    
    
    

  var canvas, ctx, onError, onSuccess, update, video;
  var cnn_result_image;
  // WebSockets.
  var ws_return, ws_image_np, ws_cnn_data;
  
  var startTime = new Date();
  var elapsedTime;
  var blobData;
    
    
  

  onError = function(e) {
    return console.log("Rejected", e);
  };

  onSuccess = function(localMediaStream) {
    try {
      video.srcObject = localMediaStream;
    } catch (error) {
      video.src = URL.createObjectURL(localMediaStream);
    }
    return setInterval(update, 50);
  };
  // -------------- BOUNDING BOXES GENERATION SCRIPT  ------------------- //
  var bbTextSize, bbTextWPadding,bbTextHPadding;
  // Let the textbox height be proportional to the size of the webcam frame.
  var TEXT_BOX_HEIGHT = Math.floor(wc_coords[3]*0.05);
  bbTextHPadding = Math.max(Math.floor(TEXT_BOX_HEIGHT*0.6),2);
  console.log('text height' + bbTextHPadding);
  // Set the bbText Size proportional to the size of the frame.
  if (wc_coords[2] < 350){
      bbTextSize = 14;
      bbTextWPadding = 10;
  }
  else{
      bbTextSize = 18;
      bbTextWPadding = 5;
  }

  function updateBoundingBoxes(){
     openCvCoords = tempOpenCvCoords;
      var PADDING = 5;
      var x,y,w,h;
        // Draw the bounding boxes
        for (var i = 0, len = openCvCoords.length; i < len; ++i) {
            var data = openCvCoords[i];
            if (data.type == "thread_data"){
                for (var j = 0, len2 = data.bbs.length; j < len2; ++j ){
                    var bb = data.bbs[j];
                    var text = data.classes[j];
                    // Draw the rectangle that will contain the object name.
                    ctx.fillStyle="#000000";
                    x = wc_coords[0] + bb[1];
                    // Ensure that the rectangle is inside the allowable area.
                    y = Math.max(wc_coords[1] + bb[0] - TEXT_BOX_HEIGHT,wc_coords[1]);
                    y = Math.min(y, wc_coords[1] + wc_coords[3]);
                    w = bb[3] - bb[1];
                    h = TEXT_BOX_HEIGHT;
                    ctx.fillRect(x,y,w,h);
                    // Draw the text inside the rectangle
                    ctx.font = bbTextSize + "pt Arial";
                    ctx.fillStyle = '#FFFFFF'
                    ctx.fillText(text,
                                 x + bbTextWPadding, 
                                 y + bbTextHPadding);
                    // Draw the bounding box around the given obect
                    ctx.strokeRect(wc_coords[0] + bb[1] + PADDING,
                                   wc_coords[1] + bb[0] + PADDING,
                                   bb[3] - bb[1] - PADDING,
                                   bb[2] - bb[0] - PADDING);
                }
            }
        } 
  }

  update = function() {
    ctx.drawImage(video, wc_coords[0], wc_coords[1], wc_coords[2], wc_coords[3]);
    // Have a seperate canvas/context for storing just the video frame
    if (doneLoading > 0){
        ctxVideo.drawImage(video,0,0,wc_coords[2],wc_coords[3]);
    }
    // Store the blob data.
    videoCanvas.toBlob(function(blob) {
        blobData = blob;
    }, 'image/jpeg');

    ws_image_np.onmessage = function(e) {
           if (blobData != null){
            // Send it only when needed.
            return ws_image_np.send(blobData);
           }
        };

    
    updateBoundingBoxes();
  };
  

  video = document.querySelector('#live');

  canvas = document.querySelector('#canvaswc');

  ctx = canvas.getContext('2d');

  ctx.strokeStyle = '#ff0';

  ctx.lineWidth = 2;

  ws_image_np = new WebSocket("wss://" + location.host + "/webcam");
  ws_return = new WebSocket("wss://" + location.host + "/mlresults");
  ws_cnn_data = new WebSocket("wss://" + location.host + "/cnn_data");

  ws_image_np.onopen = function() {
    return console.log("Opened webcam websocket");
  };

  ws_return.onopen = function() {
    return console.log("Opened mlresults websocket");
  };
  ws_cnn_data.onopen = function() {
    return console.log("Opened CNN Data websocket");
  };
  // Move this to a new websocket
  ws_return.onmessage = function(e) {
    tempOpenCvCoords = JSON.parse(e.data);
    ws_return.send(JSON.stringify({'image_properties':{'height':wc_coords[3],
                                         'width':wc_coords[2],
                                        }}));
    return console.log('receiving message' + e.data);
  };

  ws_cnn_data.onmessage = function(e) {
    cnn_result_data = JSON.parse(e.data)['img'];
    // Send a confirmation that the message has been received
    ws_cnn_data.send("Received CNN Data");
  };




  var constraints = { audio: false, video: { width: 1280, height: 720 } }; 
  navigator.mediaDevices.getUserMedia(constraints)
     .then(onSuccess)
     .catch(onError);
    

}).call(this);